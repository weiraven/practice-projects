[
    { "id": 1, "category": "String Manipulation", "prompt": "Reverse a given string." },
    { "id": 2, "category": "String Manipulation", "prompt": "Check if a given string is a palindrome." },
    { "id": 3, "category": "String Manipulation", "prompt": "Count the number of vowels in a string." },
    { "id": 4, "category": "String Manipulation", "prompt": "Find the first non-repeating character in a string." },
    { "id": 5, "category": "String Manipulation", "prompt": "Convert a string to lowercase without using built-in functions." },
    { "id": 6, "category": "String Manipulation", "prompt": "Remove all whitespace from a given string." },
    { "id": 7, "category": "String Manipulation", "prompt": "Find the most frequent character in a string." },
    { "id": 8, "category": "String Manipulation", "prompt": "Replace all spaces in a string with '%20'." },
    { "id": 9, "category": "String Manipulation", "prompt": "Check if two strings are anagrams of each other." },
  
    { "id": 10, "category": "Bit Manipulation", "prompt": "Check if a number is even or odd using bitwise operators." },
    { "id": 11, "category": "Bit Manipulation", "prompt": "Find the only non-repeating element in an array where every other element appears twice." },
    { "id": 12, "category": "Bit Manipulation", "prompt": "Swap two numbers without using a temporary variable." },
    { "id": 13, "category": "Bit Manipulation", "prompt": "Count the number of 1s in the binary representation of a number." },
    { "id": 14, "category": "Bit Manipulation", "prompt": "Toggle the kth bit of a number." },
    { "id": 15, "category": "Bit Manipulation", "prompt": "Check if a number is a power of two." },
    { "id": 16, "category": "Bit Manipulation", "prompt": "Find the rightmost set bit of a number." },
    { "id": 17, "category": "Bit Manipulation", "prompt": "Multiply a number by 2 using bitwise operations." },
    { "id": 18, "category": "Bit Manipulation", "prompt": "Find the XOR of all numbers in a given range." },
  
    { "id": 19, "category": "Arrays & Lists", "prompt": "Find the largest element in an array." },
    { "id": 20, "category": "Arrays & Lists", "prompt": "Find the second largest element in an array." },
    { "id": 21, "category": "Arrays & Lists", "prompt": "Reverse an array in place." },
    { "id": 22, "category": "Arrays & Lists", "prompt": "Find the sum of all elements in an array." },
    { "id": 23, "category": "Arrays & Lists", "prompt": "Remove duplicates from an array." },
    { "id": 24, "category": "Arrays & Lists", "prompt": "Rotate an array to the right by k steps." },
    { "id": 25, "category": "Arrays & Lists", "prompt": "Find the maximum difference between any two elements in an array." },
    { "id": 26, "category": "Arrays & Lists", "prompt": "Find the intersection of two arrays." },
    { "id": 27, "category": "Arrays & Lists", "prompt": "Find the element that appears most frequently in an array." },
  
    { "id": 28, "category": "Hashing & Dictionaries", "prompt": "Count the occurrences of each character in a string using a dictionary." },
    { "id": 29, "category": "Hashing & Dictionaries", "prompt": "Check if two strings are anagrams using a hash map." },
    { "id": 30, "category": "Hashing & Dictionaries", "prompt": "Find the first repeated character in a string using a hash set." },
    { "id": 31, "category": "Hashing & Dictionaries", "prompt": "Find two numbers in an array that add up to a target sum using a hash map." },
    { "id": 32, "category": "Hashing & Dictionaries", "prompt": "Check if an array contains duplicates using a hash set." },
    { "id": 33, "category": "Hashing & Dictionaries", "prompt": "Group words that are anagrams using hashing." },
    { "id": 34, "category": "Hashing & Dictionaries", "prompt": "Find the most frequent element in an array using a dictionary." },
    { "id": 35, "category": "Hashing & Dictionaries", "prompt": "Implement a simple phone book using a dictionary." },
    { "id": 36, "category": "Hashing & Dictionaries", "prompt": "Find missing numbers in a sequence using hashing." },
  
    { "id": 37, "category": "Sorting & Searching", "prompt": "Implement the Bubble Sort algorithm." },
    { "id": 38, "category": "Sorting & Searching", "prompt": "Implement the Selection Sort algorithm." },
    { "id": 39, "category": "Sorting & Searching", "prompt": "Implement the Insertion Sort algorithm." },
    { "id": 40, "category": "Sorting & Searching", "prompt": "Implement the Merge Sort algorithm." },
    { "id": 41, "category": "Sorting & Searching", "prompt": "Implement the Quick Sort algorithm." },
    { "id": 42, "category": "Sorting & Searching", "prompt": "Implement Binary Search on a sorted array." },
    { "id": 43, "category": "Sorting & Searching", "prompt": "Find the smallest missing number in a sorted array." },
    { "id": 44, "category": "Sorting & Searching", "prompt": "Find the kth largest element in an array using sorting." },
    { "id": 45, "category": "Sorting & Searching", "prompt": "Find the first occurrence of a target value in a sorted array." },

    { "id": 46, "category": "Stacks", "prompt": "Implement a stack using an array." },
    { "id": 47, "category": "Stacks", "prompt": "Implement a stack using a linked list." },
    { "id": 48, "category": "Stacks", "prompt": "Reverse a string using a stack." },
    { "id": 49, "category": "Stacks", "prompt": "Check if a string has balanced parentheses using a stack." },
    { "id": 50, "category": "Stacks", "prompt": "Implement a function to find the minimum element in a stack in constant time." },
    { "id": 51, "category": "Stacks", "prompt": "Implement a stack that supports push, pop, and retrieving the maximum value efficiently." },
    { "id": 52, "category": "Stacks", "prompt": "Evaluate a postfix expression using a stack." },
    { "id": 53, "category": "Stacks", "prompt": "Sort a stack using another stack." },
    { "id": 54, "category": "Stacks", "prompt": "Convert an infix expression to postfix notation." },

    { "id": 55, "category": "Queues", "prompt": "Implement a queue using an array." },
    { "id": 56, "category": "Queues", "prompt": "Implement a queue using a linked list." },
    { "id": 57, "category": "Queues", "prompt": "Implement a circular queue." },
    { "id": 58, "category": "Queues", "prompt": "Implement a queue using two stacks." },
    { "id": 59, "category": "Queues", "prompt": "Find the first non-repeating character in a stream using a queue." },
    { "id": 60, "category": "Queues", "prompt": "Reverse the elements of a queue using recursion." },
    { "id": 61, "category": "Queues", "prompt": "Implement a priority queue using a heap." },
    { "id": 62, "category": "Queues", "prompt": "Check if a given sequence of enqueue and dequeue operations is valid." },
    { "id": 63, "category": "Queues", "prompt": "Implement a queue that supports retrieving the maximum element efficiently." },

    { "id": 64, "category": "Linked Lists", "prompt": "Implement a singly linked list and support insert, delete, and print operations." },
    { "id": 65, "category": "Linked Lists", "prompt": "Reverse a linked list iteratively." },
    { "id": 66, "category": "Linked Lists", "prompt": "Reverse a linked list recursively." },
    { "id": 67, "category": "Linked Lists", "prompt": "Find the middle element of a linked list." },
    { "id": 68, "category": "Linked Lists", "prompt": "Detect a cycle in a linked list." },
    { "id": 69, "category": "Linked Lists", "prompt": "Merge two sorted linked lists." },
    { "id": 70, "category": "Linked Lists", "prompt": "Find the nth node from the end of a linked list." },
    { "id": 71, "category": "Linked Lists", "prompt": "Delete a node in the middle of a linked list given only access to that node." },
    { "id": 72, "category": "Linked Lists", "prompt": "Remove duplicates from an unsorted linked list." },

    { "id": 73, "category": "Binary Trees", "prompt": "Implement a binary tree and support insertion and traversal (inorder, preorder, postorder)." },
    { "id": 74, "category": "Binary Trees", "prompt": "Find the height of a binary tree." },
    { "id": 75, "category": "Binary Trees", "prompt": "Find the maximum element in a binary tree." },
    { "id": 76, "category": "Binary Trees", "prompt": "Find the lowest common ancestor of two nodes in a binary tree." },
    { "id": 77, "category": "Binary Trees", "prompt": "Check if a binary tree is balanced." },
    { "id": 78, "category": "Binary Trees", "prompt": "Check if a binary tree is a binary search tree (BST)." },
    { "id": 79, "category": "Binary Trees", "prompt": "Print the level-order traversal of a binary tree." },
    { "id": 80, "category": "Binary Trees", "prompt": "Find the number of leaf nodes in a binary tree." },
    { "id": 81, "category": "Binary Trees", "prompt": "Serialize and deserialize a binary tree." },

    { "id": 82, "category": "Two Pointer", "prompt": "Find two numbers in a sorted array that sum to a given target." },
    { "id": 83, "category": "Two Pointer", "prompt": "Remove all duplicates from a sorted array in-place." },
    { "id": 84, "category": "Two Pointer", "prompt": "Reverse an array using the two-pointer approach." },
    { "id": 85, "category": "Two Pointer", "prompt": "Find the longest palindrome in a string using two pointers." },
    { "id": 86, "category": "Two Pointer", "prompt": "Move all zeroes to the end of an array while maintaining order." },
    { "id": 87, "category": "Two Pointer", "prompt": "Find the intersection of two sorted arrays using two pointers." },
    { "id": 88, "category": "Two Pointer", "prompt": "Check if a linked list is a palindrome using the two-pointer approach." },
    { "id": 89, "category": "Two Pointer", "prompt": "Sort an array of 0s, 1s, and 2s using the two-pointer technique." },
    { "id": 90, "category": "Two Pointer", "prompt": "Find the minimum difference between two sorted arrays using two pointers." }

  ]
  